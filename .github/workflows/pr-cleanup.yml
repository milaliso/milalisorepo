name: Cleanup PR Environment

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  AWS_REGION: us-east-1
  SAM_CLI_TELEMETRY: 0

jobs:
  cleanup-pr-environment:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Set PR environment variables
        run: |
          echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_ENV
          echo "PR_STACK_NAME=milaliso-pr-${{ github.event.number }}-dev" >> $GITHUB_ENV
          echo "PR_MERGED=${{ github.event.pull_request.merged }}" >> $GITHUB_ENV
          
      - name: Update PR with cleanup start
        uses: actions/github-script@v7
        with:
          script: |
            const merged = '${{ env.PR_MERGED }}' === 'true';
            const action = merged ? 'merged' : 'closed';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üßπ **Environment Cleanup Started**
              
              PR #${{ env.PR_NUMBER }} was ${action}. Cleaning up dev environment...
              
              - **Stack Name**: \`${{ env.PR_STACK_NAME }}\`
              - **Status**: üîÑ Cleaning up resources
              
              [View cleanup logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });
            
      - name: Cleanup PR-specific stacks
        id: cleanup
        run: |
          echo "üßπ Cleaning up PR-specific CloudFormation stacks..."
          
          CLEANUP_SUCCESS=true
          CLEANED_STACKS=""
          
          # Find all stacks that match the PR pattern
          PR_STACKS=$(aws cloudformation list-stacks \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
            --query "StackSummaries[?contains(StackName, 'milaliso-pr-${{ env.PR_NUMBER }}-')].StackName" \
            --output text)
          
          if [ -n "$PR_STACKS" ]; then
            for stack_name in $PR_STACKS; do
              echo "üóëÔ∏è Deleting stack: $stack_name"
              
              if aws cloudformation delete-stack --stack-name "$stack_name"; then
                echo "‚úÖ Initiated deletion for $stack_name"
                CLEANED_STACKS="$CLEANED_STACKS- ‚úÖ $stack_name\n"
                
                # Wait for stack deletion to complete (with timeout)
                echo "‚è≥ Waiting for stack deletion to complete..."
                if timeout 600 aws cloudformation wait stack-delete-complete --stack-name "$stack_name"; then
                  echo "‚úÖ Stack $stack_name deleted successfully"
                else
                  echo "‚ö†Ô∏è Stack $stack_name deletion timed out (may still be in progress)"
                  CLEANED_STACKS="$CLEANED_STACKS  ‚ö†Ô∏è Deletion in progress (timed out)\n"
                fi
              else
                echo "‚ùå Failed to delete stack: $stack_name"
                CLEANUP_SUCCESS=false
                CLEANED_STACKS="$CLEANED_STACKS- ‚ùå $stack_name (deletion failed)\n"
              fi
            done
          else
            echo "‚ÑπÔ∏è No PR-specific stacks found to clean up"
            CLEANED_STACKS="- ‚ÑπÔ∏è No stacks found for PR #${{ env.PR_NUMBER }}"
          fi
          
          # Set outputs
          echo "cleanup_success=$CLEANUP_SUCCESS" >> $GITHUB_OUTPUT
          echo "cleaned_stacks<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CLEANED_STACKS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Cleanup S3 deployment artifacts
        run: |
          echo "üóëÔ∏è Cleaning up S3 deployment artifacts..."
          
          # Clean up SAM deployment artifacts for this PR
          S3_BUCKET=$(aws cloudformation describe-stacks \
            --query "Stacks[?contains(StackName, 'aws-sam-cli-managed-default')].Outputs[?OutputKey=='SourceBucket'].OutputValue" \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$S3_BUCKET" ] && [ "$S3_BUCKET" != "None" ]; then
            echo "üì¶ Found SAM deployment bucket: $S3_BUCKET"
            
            # Delete objects with PR-specific prefix
            aws s3 rm "s3://$S3_BUCKET/" \
              --recursive \
              --exclude "*" \
              --include "*milaliso-pr-${{ env.PR_NUMBER }}-*" \
              2>/dev/null || echo "‚ÑπÔ∏è No PR-specific S3 objects found"
          else
            echo "‚ÑπÔ∏è No SAM deployment bucket found"
          fi
          
      - name: Update PR with cleanup success
        if: steps.cleanup.outputs.cleanup_success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const cleanedStacks = `${{ steps.cleanup.outputs.cleaned_stacks }}`;
            const merged = '${{ env.PR_MERGED }}' === 'true';
            const action = merged ? 'merged' : 'closed';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ **Environment Cleanup Complete**
              
              PR #${{ env.PR_NUMBER }} environment has been cleaned up after being ${action}.
              
              ## üóëÔ∏è Cleaned Resources
              ${cleanedStacks}
              
              ## üí∞ Cost Savings
              All AWS resources for this PR have been removed to prevent unnecessary charges.
              
              ${merged ? 'üéâ **Thank you for your contribution!**' : ''}
              
              [View cleanup logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });
            
      - name: Update PR with cleanup failure
        if: steps.cleanup.outputs.cleanup_success == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const cleanedStacks = `${{ steps.cleanup.outputs.cleaned_stacks }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ö†Ô∏è **Environment Cleanup Issues**
              
              Some resources for PR #${{ env.PR_NUMBER }} could not be cleaned up automatically.
              
              ## üóëÔ∏è Cleanup Status
              ${cleanedStacks}
              
              ## üîß Manual Action Required
              Please check the AWS console and manually delete any remaining resources:
              - CloudFormation stacks starting with \`milaliso-pr-${{ env.PR_NUMBER }}-\`
              - Associated S3 buckets and objects
              - Lambda functions and API Gateways
              
              [View cleanup logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for more details.`
            });